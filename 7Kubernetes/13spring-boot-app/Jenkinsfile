pipeline {
  agent { //"Run this pipeline inside a Docker container instead of directly on the Jenkins node."
    docker {
      //image 'abhishekf5/maven-abhishek-docker-agent:v1' //Use this Docker image from Docker Hub as the build environment. It probably contains Maven + Docker CLI pre-installed.
      image 'maven'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Run the container as root user, and mount the Docker socket so that Docker CLI commands inside the container can talk to the host’s Docker daemon. The Docker socket is a special Unix file located at: /var/run/docker.sock. It acts as an interface between the Docker CLI and the Docker daemon (dockerd). If you mount the socket into a container, then the container can send commands to the host’s Docker daemon. This is how you allow a container to build, run, and manage other containers on the host.
    }
  }
  stages {
    stage('Checkout') { //The checkout stage is typically the first step in a CI/CD pipeline. It refers to retrieving your source code from a version control system like GitHub, GitLab, or Bitbucket so that the pipeline can build, test, or deploy it. It clones or pulls the repository to the agent/runner machine
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    } 
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      } 
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.90.239.211:9000"
      }
      steps { //withCredentials is a Jenkins Pipeline step that allows you to safely use credentials stored in Jenkins (like tokens, passwords, usernames, etc.) inside a pipeline script, without hardcoding secrets in your code
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) { //variable: 'SONAR_AUTH_TOKEN' This is the temporary environment variable that Jenkins creates inside the withCredentials block. It injects the secret into this variable.
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}") //docker.image(...) doesn't build or pull — it just represents the image, so you can run commands on it later (like push, run, etc.). def in Groovy (the language Jenkins pipelines use). The keyword def is used to define a variable without explicitly specifying its type.


            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") { //This wraps the following block with Docker registry authentication. 'https://index.docker.io/v1/' is the URL for Docker Hub. "docker-cred" is the ID of your Jenkins credentials (stored under Credentials → Docker).
                dockerImage.push() //This command pushes the Docker image (which was defined earlier) to the Docker registry. It uses the authenticated session from withRegistry.
                // You can push directly with docker.image("name").push() without defining it as  def dockerImage = docker.image("${DOCKER_IMAGE}"). But if you're going to reuse the image, define it as a variable with def dockerImage = docker.image(...) for clarity and flexibility.
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "iam-veeramalla"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                //git push https://ghp_123abc456xyz@github.com/cyril91/Jenkins-Zero-To-Hero HEAD:main = 
                //This pushes your current branch’s code to the main branch on GitHub, authenticated using the token ghp_123abc456xyz.
                sh '''
                    git config user.email "abhishek.xyz@gmail.com"
                    git config user.name "Abhishek Veeramalla"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}

