#Install a metric server to calculate the cpu or memory usage(kubectl top pods) = kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels: #These labels are deployment set labels.Every k8s resources have labels
    app: guestbook
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 3
  selector: #selector should match with template. The selector should match with pod labels
    matchLabels:
      tier: nginx
      env: prod
  template: #Template is pod labels   
    metadata:
      labels:
        tier: nginx
        env: prod
    spec:
      containers: 
      - name: nginx
        image: nginx:latest
        ports: 
        - containerPort: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx
spec: #scaleTargetRef+minReplicas+maxReplicas+metrics
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 1
  maxReplicas: 5 
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

# HPA adjusts the number of pods, not containers directly.
# In your Deployment, each pod runs one container (nginx).
# ðŸ“Š At Max Scaling:
# MaxReplicas: 5 â†’ This means up to 5 pods can be created.

# Since each pod has 1 container, you'll have:
# Max 5 pods Ã— 1 container per pod = 5 containers total
# The confusion might come from the replicas: 3 in the Deployment, but HPA overrides that based on CPU metrics.
# It does not multiply with initial replicas â€” it controls the total pod count within the range [minReplicas, maxReplicas].
# So the max number of nginx containers = 5, not 15.
# Summary: Initial pods = 3 (from replicas). HPA dynamically scales between 1 and 5 pods. Each pod = 1 container â†’ Max containers = 5
