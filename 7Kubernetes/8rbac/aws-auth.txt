1. To get aaws-auth configmap infor = kubectl get configmap aws-auth -n kube-system -o yaml
#-o yaml: you're asking for the raw YAML output instead of the default table view.

apiVersion: v1
data:
  mapRoles: |
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::717279696402:role/eksctl-eks-cluster-nodegroup-spot-NodeInstanceRole-PFsC5z9RWwm4
      username: system:node:{{EC2PrivateDNSName}}
kind: ConfigMap
metadata:
  creationTimestamp: "2025-04-21T17:12:18Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "1308"
  uid: 76bfa94f-03ac-4168-93a1-0c8ab523eeeb

2. Edit the above information: 

apiVersion: v1
data:
  mapRoles: |
    - groups:  
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::717279696402:role/eksctl-eks-cluster-nodegroup-spot-NodeInstanceRole-PFsC5z9RWwm4
      username: system:node:{{EC2PrivateDNSName}}
  mapUsers: |
    - groups:
       - roboshop-admin #A group in Kubernetes is just a label for a set of users. Yes â€” technically, you can avoid writing groups in the aws-auth ConfigMap.
        userarn: arn:aws:iam::717279696402:user/cyril
        username: ramesh
kind: ConfigMap
metadata:
  creationTimestamp: "2025-04-21T17:12:18Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "1308"
  uid: 76bfa94f-03ac-4168-93a1-0c8ab523eeeb

3. Add this to the admin.yaml code and kubectl apply it 
4. Create a new ec2 instance and use aws configure and give the accesskey of ramesh
5. Install kubernetes
5. To access eks = aws eks update-kubeconfig --region us-east-1 --name eks-cluster 
6. To avoid adding to a group = 
  mapUsers: |
         - userarn: arn:aws:iam::833660969111:user/abc
           username: abc