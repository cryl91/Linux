pipeline {
    agent any //To run on different agent = agent { node { label 'agent1' } }
    environment{ //Here if you create any variable you will have global issues. Since its environment no need of def.
        packageversion = ''
        region = "us-east-1a"
    }
    parameters {
        string(name: 'version', defaultValue: '1.0.0', description: 'Which version to deploy?')
    }
    stages {
         stage('Get Version') {
            steps {
                script { //You need to mention script word for groovy
                def packagejson = readJSON(file: 'package.json')
                def packageversion = packagejson.version
                echo "version: ${packageversion}"
                }
            }
         }
         stage('Install Dependencies') {
            steps {
             sh ''' 
            ls -ltr 
             cd 12Project/Mongo/2CIPipeline
                 npm install
                 npm audit fix --force

                 pwd
            '''
             } 
     }
        stage('Unit Test') { 
            steps {
                echo 'Unit Testing done' 
            }
        }
        //Sonar-scanner command expects sonar-project.properties should be available otherwise you will get error
        // stage('SonarScan') {
        //     steps {
                 
        //       dir('Jenkins/catalogue_pipeline'){
        //           sh '/opt/sonar-scanner/bin/sonar-scanner'
        //      }
        //     //To use sh command use like this = sh 'cd Jenkins/catalogue_pipeline && /opt/sonar-scanner/bin/sonar-scanner'   
        //     }
        // }
        stage('Build') {
            steps {
                sh 'ls -ltr'
                sh''' 
                cd 12Project/Mongo/2CIPipeline
                zip -r catalogue.zip ./* --exclude=.git --exclude=.zip
                '''           
                //or use this = zip -r catalogue.zip . -x "*.git*" "*.zip"
            }
        }
        //Install pipeline utility steps plugin, if not installed. It adds a set of common helper functions to Jenkins Declarative and Scripted Pipelines â€” especially for dealing with files, archives, JSON, YAML, properties files, and more.
        stage('Deploy to Nexus') {
            steps {
                echo 'Deploy1'
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: 'http://10.0.0.1/',
                groupId: 'com.roboshop',
                version: "packageversion", //Put the version variable here
                repository: 'catalogue',
                credentialsId: 'Nexux-auth', //crea  te  t his in manage jenkins->credentials->system->global credentials->add creadentials->username,password,id->add id to this code here
                artifacts: [
                    [artifactId: catalogue,
                    classifier: '',
                    file: 'catalogue.zip',
                    type: 'zip']
                ]
            )

            }
        }

        stage('Docker Build') { 
            steps {
                script{
                    sh '''
                    cd 12Project/Mongo/2CIPipeline/
                    docker build -t cryl91/mongodb
                    '''
                }
                
                }
            }

        stage('Docker Push') { 
            steps {
                script{
                      withCredentials([usernamePassword(credentialsId: 'docker-auth', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){ 
                    sh '''
                    docker login -u $USERNAME -p $PASSWORD
                    cd 12Project/Mongo/2CIPipeline                    
                    docker push cryl91/mongodb
                    '''
                      }
                      }
                
                }
            }
//If you want to push it to ECR. And in Manifest.yaml give this image id of ECR(ie URI ID). Also the ec2 should have ECR access. 
        stage('ECR Push') { 
            steps {
                script{
                    sh """
                    aws ecr get-login-password --region $region | docker login --username AWS --password-stdin 717279696402.dkr.ecr.us-east-1.amazonaws.com
                    docker tag cryl91/mongodb:latest 717279696402.dkr.ecr.us-east-1.amazonaws.com/mongodb:latest
                    docker push 717279696402.dkr.ecr.us-east-1.amazonaws.com/mongodb:latest
                    """

                      }
                
                }
            }

        stage('EKS Deploy') { 
            steps {
                script{
                    sh '''
                    cd .. /1helm
                    sed -i 's/IMAGE_VERSION/$packageversion/g' values.yaml
                    helm install ${component} . 
                    '''
//Or instead of helm install ${component} you can use kubectl apply -f manifest.yaml
                   }
                
                }
            }
    
        } 

        }


        post {
            always {
                echo "I will run everytime and clean up the directory"
               // deleteDir()
            }

            success {
                echo "I will run only on success"
            }
            failure {
                echo "I will run only on failure"
            }
        }
    
} 