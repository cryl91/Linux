#Create a configmap to pass variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  namespace: roboshop
data:
  nginx.conf: | #To give the conf info through configmap than keeping it as a separate file to avoid rebuilding the image
    # Instana tracing
    opentracing_load_tracer /usr/local/lib/libinstana_sensor.so /etc/instana-config.json;
    opentracing_propagate_context;

    server {
        listen       8080;
        server_name  localhost;

        proxy_http_version 1.1;

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;
        #error_log /dev/stdout debug;
        #rewrite_log on;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            ssi    on;
        }

        location /images/ {
            expires 5s;
            root   /usr/share/nginx/html;
            try_files $uri /images/placeholder.png;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        location /api/catalogue/ {
            proxy_pass http://catalogue:8080/;
        }

        location /api/user/ {
            proxy_pass http://${USER_HOST}:8080/;
        }

        location /api/cart/ {
            proxy_pass http://${CART_HOST}:8080/;
        }

        location /api/shipping/ {
            proxy_pass http://${SHIPPING_HOST}:8080/;
        }

        location /api/payment/ {
            proxy_pass http://${PAYMENT_HOST}:8080/;
        }

        location /api/ratings/ {
            proxy_pass http://${RATINGS_HOST}:80/;
        }

        location /nginx_status {
            stub_status on;
            access_log off;
        }
        }  
---
#Deployment code is put here.apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: roboshop
  labels: #These labels are deployment set labels.Every k8s resources have labels
    app: web
    tier: web
spec:
  # modify replicas according to your case
  replicas: 2
  selector: #selector should match with template. The selector should match with pod labels
    matchLabels:
      app: web
      tier: web
  template: #Template is pod labels   
    metadata:
      labels:
        app: web
        tier: web
    spec: 
      volumes: #To refer nginx.conf into this pod, for this you need to use volume and mount it
      - name: nginx-conf #Volume name
        configMap:
          name: nginx #name of congifmap
          items: #You're sourcing this volume from a ConfigMap ie You're telling Kubernetes to create a volume using the data stored in a ConfigMap.
          #You're using a ConfigMap to provide data that will be available to the container as files via a volume. 
          - key: nginx-conf #the key and path are same value usually. You're using a ConfigMap to provide data that will be available to the container as files via a volume.
            path: nginx-conf #This is the filename it will be mounted as inside the volume
      containers: 
      - name: web
        image: joindevops/web:1.0
        volumeMounts: #To mount the volume you created above
        - name: nginx-conf     
          mountPath: /etc/nginx/nginx.conf #This is the filename it will be mounted as inside the volume. ie  Static config volume which is used to  Mount a config file (filebeat.yml) into Filebeat’s container. And  Not meant to be shared — it’s mounted read-only by one container, for configuration only.
          subPath: nginx.conf
          readOnly: true #This means no one can change this configuration even if they logged into the container
---
#Setting up a clusterip to connect catalogue to web
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: roboshop
spec:
  type: LoadBalancer
  selector:
    env: web
    app: frwebontend
  ports:
  - name: name-of-service-port
    protocol: TCP
    port: 80 #This port number belongs to service
    targetPort: 80 #This port number belongs to container

