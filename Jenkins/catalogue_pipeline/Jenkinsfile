pipeline {
    agent any //To run on different agent = agent { node { label 'agent1' } }
    
    stages {
         stage('Install Dependencies') {
            steps {
             sh ''' 
            ls -ltr 
             cd Jenkins/catalogue_pipeline
                 npm install
                 npm audit fix --force

                 pwd
            '''
             } 
     }
        stage('Unit Test') { 
            steps {
                echo 'Unit Testing done' 
            }
        }
        //Sonar-scanner command expects sonar-project.properties should be available otherwise you will get error
        // stage('SonarScan') {
        //     steps {
                 
        //       dir('Jenkins/catalogue_pipeline'){
        //           sh '/opt/sonar-scanner/bin/sonar-scanner'
        //      }
        //     //To use sh command use like this = sh 'cd Jenkins/catalogue_pipeline && /opt/sonar-scanner/bin/sonar-scanner'   
        //     }
        // }
        stage('Build') {
            steps {
                sh 'ls -ltr'
                sh''' 
                cd Jenkins/catalogue_pipeline
                zip -r catalogue.zip ./* --exclude=.git --exclude=.zip
                '''           
                //or use this = zip -r catalogue.zip . -x "*.git*" "*.zip"
            }
        }
        stage('Deploy to Nexus') {
            steps {
                echo 'Deploy1'
            //     nexusArtifactUploader(
            //     nexusVersion: 'nexus3',
            //     protocol: 'http',
            //     nexusUrl: 'http://10.0.0.1/',
            //     groupId: 'com.roboshop',
            //     version: '1.0.0',
            //     repository: 'catalogue',
            //     credentialsId: 'Nexux-auth', //create this in manage jenkins->credentials->system->global credentials->add creadentials->username,password,id->add id to this code here
            //     artifacts: [
            //         [artifactId: catalogue,
            //         classifier: '',
            //         file: 'catalogue.zip',
            //         type: 'zip']
            //     ]
            // )

            }
        }
    }

        post {
            always {
                echo "I will run everytime and clean up the directory"
               // deleteDir()
            }

            success {
                echo "I will run only on success"
            }
            failure {
                echo "I will run only on failure"
            }
        }
    
} 