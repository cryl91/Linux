pipeline {
    agent any //To run on different agent = agent { node { label 'agent1' } }
    parameters {
        string(name: 'version', defaultValue: '1.0.0', description: 'Which version to deploy?')
    }
    stages {
        stage('Version') {
            steps {
                sh ''' 
                echo "Version is: ${params.version}"
                '''
             }
        }
        stage('Create EC2 Instance-init') { //Make sure terraform is installed and also aws configure done inside agent
            steps {
                sh ''' 
                cd terraform_ec2
                terraform init -reconfigure
                '''
            } 
        }
        stage('Create EC2 Instance-plan') { //Make sure terraform is installed and also aws configure done inside agent
            steps {
                sh ''' 
                terraform plan -var="app_version=${params.version}"
                '''
            } 
        }
        //params.version variable flow = Jenkins ->Terraform->catalogue.sh->Ansible ++++ For doing this have variable declaration in terraform and ansible  
        stage('Create EC2 Instance-apply') { //Make sure terraform is installed and also aws configure done inside agent
            steps {
                sh ''' 
                terraform apply -auto-approve -var="app_version=${params.version}" 
                '''
            } 
        }
        //Once the instance is created, call remote provisioner and copy the catalogue script into ec2 and run it
        //Use null resource remote provisioner as normal provisioner works only if instance is not already created. While null resource works on already created instance. 
            
        stage('Apply') {
            steps {
                sh 'echo "Applied"'
            }
        }

    }

        post {
            always {
                echo "I will run everytime"
            }

            success {
                echo "I will run only on success"
            }
            failure {
                echo "I will run only on failure"
            }
        }
    
} 